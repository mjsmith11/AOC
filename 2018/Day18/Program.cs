using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


// The for i loop can be adjusted to stop after 10 for part 1.
// For part 2, I ran it to 1000 and observed the pattern and worked out the math.

namespace ConsoleApp1
{
	class Program
	{
		static void Main(string[] args)
		{
			string input = @"|.||#.##..|....|.|.|.|#||#...|.#.||#.....##|..#...
.......#.|#...|.|#........#...|..#|.|...#.|..#..##
|.#...##.|.|.|#..#..#.||#..#.##|#.|..##..|.##..|.#
|.|...||#|###..|#|#...#|.....||.....|.#.......|...
.||..|.#|.|.....||..|.#.#.|##.|..|.##|..|...#....#
.###....#.#....#..#..||.|.#..|....#||........|..#|
#..#...||#.#.|#..#..|.|.||.#|.|..#..|..|.....#....
|.#|...#|||.|.#.#|.#.|.##|||#|.#.....#..|.#.......
.....|.|....#||...|#||#|||.#..#|#..#...#|...|||...
.|......#......|.#..##......#|.##.#..#..|.#||..###
..|..|###|.|.|###.||#|.#.|..##...|..|#.|....#..#.#
||...#.#.#.......||.||..#.#|#||...|.|......#...||.
|.#.#.#|#|...#..|..#|||#|...|...|#...#..##|...|||.
|....|.....#.##|#....|##.....|..|#.|||..|##..#|..#
...||.#|#||#...|.||.#.#....||.|.|#.##.#.#|....##..
..|.#..#.##|##..........|......#..#|.|.#......#...
|..|..#....|.#|..|...##..|.#|||#...#.|..|...##|...
.|....|##...|.|.|##....||..##.|#.#..|...|..|#....#
.|#..##.||...#.|...|#........#|#|.#.|##.|##...|.|.
.|....|.|.....|...#......|...###....|.#...|...|.#.
|.||..#.#..#||..#||.|.|.####.#...#.#.#......#...#.
#|||...|#......|...#..##..##||...|#.|...#.##..||..
.||...#...#.#.........#....|#..|.#||...|.##||..|##
|....||.....#.....|..#.#.#...#.#......|...##.|#...
|.|.|#..||#.|..|.|..#.##|...#.#....#|...#|#.###|..
#...........|.#..||.|..#|.....|..|..|....##....|.|
..|.|.....#......|.|..|.....##.#.#........|....#.#
|..|..#.|..|..#.....|.|#..#..|#.|...|.#...|#|#|..|
|..#.......|###|.|..#...#.#..#|.#.####....##...|..
..#.#..#|#.|...|.#.....##.#|#..#..|..|###.....|.#.
.#....##.|..#|.#.|||.|.|......####.||...#.#..##.||
....||#..##..#|...#|.....|#.|..........|.|.|.#.#|.
|....#|..|.|#|#.....#|..|...#..|...|....|.||..||##
....#..|.#..#...|..|..#.#....|..#.#..||#....##.||#
.|....###.............||.#......#..||.#.|#..#|...|
.||..||....|#..|....#.|..|....###..#.#......|#.#..
||.|#.#.|.#.#.#.#.#|...............|#|#..||..|....
#...|#...#...|.#...|.....##...##.||#|#...#....|||.
.#..|..|.|||#......|#......|.#..........#......|#|
.....#.#..||....##.#.||##..#.|.#.|#.#...|#.#|.|...
||#.#...#.#|...|...#...##..|..|......#....|##.....
..#.#.....|#.#.#.|...|.#..#..#.|.....#...|||...|.|
|#..#..|......|.|.||.|.......#.#|....|#.|.|.|#|...
.|.....|..#...||..##.#...#..|...#.|#..||.|.#....||
.#..#...##|.|#.#...#....|.|....|......##..|.|.|...
...#.#|#.|#||#...#|..#......||#|#|.#...||.|.#.#.##
|#|.###....#...#.#....#.#....#.##...#......##..#..
....||..#.#.||......#.#|#....|.|...###|#.|||...#|.
.#.|#...||.|.....#.|.|#.#....#.....|.|...||#.|||#|
|.|.##...#..#.............||..|.||.#..|..........#";
			string[] lines = input.Split('\n');
			int size = lines.Length;
			char[,] orig  = new char[size,size];
			for (int x = 0; x < size; x++)
			{
				for (int y = 0; y < size; y++)
				{
					orig[x, y] = lines[y][x];
				}
			}


			for (int i = 0; i < 1000; i++)
			{
				char[,] newGrid = new char[size, size];
				for (int x = 0; x < size; x++)
				{
					for (int y = 0; y < size; y++)
					{
						string adj = "";

						//clockwise
						if (x > 0 && y > 0)
						{
							adj += orig[x - 1, y - 1];
						}
						if (y > 0)
						{
							adj += orig[x, y - 1];
						}
						if (x < (size - 1) && y > 0)
						{
							adj += orig[x + 1, y - 1];
						}
						if (x < (size - 1))
						{
							adj += orig[x + 1, y];
						}
						if (x < (size - 1) && y < (size - 1))
						{
							adj += orig[x + 1, y + 1];
						}
						if (y < (size - 1))
						{
							adj += orig[x, y + 1];
						}
						if (x > 0 && y < (size - 1))
						{
							adj += orig[x - 1, y + 1];
						}
						if (x > 0)
						{
							adj += orig[x - 1, y];
						}

						int trees = 0;
						int lumber = 0;
						int open = 0;
						foreach (char c in adj)
						{
							if (c == '.')
							{
								open++;
							}
							else if (c == '|')
							{
								trees++;
							}
							else
							{
								lumber++;
							}
						}
						if (orig[x, y] == '.')
						{
							if (trees >= 3)
							{
								newGrid[x, y] = '|';
							}
							else
							{
								newGrid[x, y] = '.';
							}
						}
						else if (orig[x, y] == '|')
						{
							if (lumber >= 3)
							{
								newGrid[x, y] = '#';
							}
							else
							{
								newGrid[x, y] = '|';
							}
						}
						else if (orig[x, y] == '#')
						{
							if (lumber >= 1 && trees >= 1)
							{
								newGrid[x, y] = '#';
							}
							else
							{
								newGrid[x, y] = '.';
							}
						}

					}

				}
				orig = newGrid;

				int wooded = 0;
				int lumberyard = 0;
				for (int y = 0; y < size; y++)
				{
					for (int x = 0; x < size; x++)
					{
						if (orig[x, y] == '#')
						{
							lumberyard++;
						}
						else if (orig[x, y] == '|')
						{
							wooded++;
						}
					}

				}
				int minComplete = i+1;
				int value = wooded * lumberyard;
				Console.WriteLine("After "+minComplete + ": lumber="+lumberyard + " woods="+wooded+" value="+value);
			}
			
			Console.ReadLine();

		}
	}

}
