// See https://aka.ms/new-console-template for more information
Console.WriteLine("Part 1 : " + part1());
Console.WriteLine("Part 2 : " + part2());

static long part1() {
    string data = hexToBin(getInput());

    PacketProcessor p = new PacketProcessor(data);
    p.process(0);

    return p.versionSum;
}

static long part2() {
    string data = hexToBin(getInput());

    PacketProcessor p = new PacketProcessor(data);
    p.process(0);

    return p.value;
}

static string hexToBin(string hex) {
    string binStr = "";
    foreach(char c in hex) {
        binStr = binStr + getBinForChar(c);
    }
    return binStr;
}


static string getBinForChar(char c) {
    switch(c) {
        case '0': return "0000";
        case '1': return "0001";
        case '2': return "0010";
        case '3': return "0011";
        case '4': return "0100";
        case '5': return "0101";
        case '6': return "0110";
        case '7': return "0111";
        case '8': return "1000";
        case '9': return "1001";
        case 'A': return "1010";
        case 'B': return "1011";
        case 'C': return "1100";
        case 'D': return "1101";
        case 'E': return "1110";
        case 'F': return "1111";
        default: return "wtf";
    }
}

static string getInput() {
    return
}