class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def getString(self):
        return str(self.x) + "," + str(self.y)
        
    def Around(self):
        return [Point(self.x+1, self.y), Point(self.x-1,self.y), Point(self.x,self.y-1), Point(self.x,self.y+1)]
        
class ReachableKey:
    def __init__(self, key, distance, obstacles):
        self.key = key
        self.obstacles = obstacles
        self.distance = distance
        
class State:
    def __init__(self, p1, p2, p3, p4, ownedKeys, steps):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
        self.p4 = p4
        self.ownedKeys = ownedKeys
        self.steps = steps
        
        
def FindPositionOf(character, lines):
    for y in range(rows):
        for x in range(cols):
            if(lines[y][x] == character):
                return Point(x,y)
    print("Not good")
    return Point(0,0)
    
    # [][], point, string
def ReachableKeys(lines, start, currentKeys):
    list = []
    visited = {}
    
    q = []
    s = []
    o = []
    
    q.append(start)
    s.append(0)
    o.append(0)
    
    while(len(q) > 0):
        pos = q.pop(0)
        dist = s.pop(0)
        obst = o.pop(0)
        
        if (pos.getString() in visited):
            continue
        
        visited[pos.getString()]=""
        c = lines[pos.y][pos.x]
        
        if ((c=="1") or (c=="2") or (c=="3") or (c=="4")):
            c="."
        
        if(c.islower()):
            list.append(ReachableKey(c, dist, obst))
            for p in pos.Around():
                q.append(p)
                s.append(dist + 1)
                o.append(obst)
        elif(c.isupper()):
            for p in pos.Around():
                q.append(p)
                s.append(dist + 1)
                o.append(obst | (2**(ord(c.lower())-ord("a"))))
        elif(c=="."):
            for p in pos.Around():
                q.append(p)
                s.append(dist + 1)
                o.append(obst)
    return list
    
def CollectKeys(map, keyPaths, numKeys):
    p1 = FindPositionOf("1", map)
    p2 = FindPositionOf("2", map)
    p3 = FindPositionOf("3", map)
    p4 = FindPositionOf("4", map)
    currentMin = 1000000000
    
    q = []
    q.append(State(p1,p2,p3,p4, 0, 0))
    
    visited = {}
    finishValue = 0
    
    for i in range(numKeys):
        finishValue |= 2**i
    
    while(len(q) > 0):
        state = q.pop(0)
        valueString = state.p1.getString() + "," + state.p2.getString() +","+ state.p3.getString()+","+state.p4.getString()+"," +str(state.ownedKeys)
        if (valueString in visited):
            steps = visited[valueString]
            if (steps<=state.steps):
                continue # if we've been in this state already with less steps, we don't care
            # otherwise, we update the visited so it knows
            visited[valueString] = state.steps
        else:
            visited[valueString] = state.steps
            
        if(state.ownedKeys == finishValue):
            currentMin = min(state.steps, currentMin)
            #print(currentMin)
            continue
        
        for k in keyPaths[state.p1.getString()]:
            ki = 2**(ord(k.key) - ord('a'))
            if ((state.ownedKeys & ki) == ki):
                continue
            if ((k.obstacles & state.ownedKeys) != k.obstacles):
                continue
            newOwned = state.ownedKeys | ki
            
            newPos = FindPositionOf(k.key, map)
            q.append(State(newPos, state.p2, state.p3, state.p4, newOwned, state.steps + k.distance))
            
        for k in keyPaths[state.p2.getString()]:
            ki = 2**(ord(k.key) - ord('a'))
            if ((state.ownedKeys & ki) == ki):
                continue
            if ((k.obstacles & state.ownedKeys) != k.obstacles):
                continue
            newOwned = state.ownedKeys | ki
            
            newPos = FindPositionOf(k.key, map)
            q.append(State(state.p1, newPos, state.p3, state.p4, newOwned, state.steps + k.distance))
            
        for k in keyPaths[state.p3.getString()]:
            ki = 2**(ord(k.key) - ord('a'))
            if ((state.ownedKeys & ki) == ki):
                continue
            if ((k.obstacles & state.ownedKeys) != k.obstacles):
                continue
            newOwned = state.ownedKeys | ki
            
            newPos = FindPositionOf(k.key, map)
            q.append(State(state.p1, state.p2, newPos, state.p4, newOwned, state.steps + k.distance))
            
        for k in keyPaths[state.p4.getString()]:
            ki = 2**(ord(k.key) - ord('a'))
            if ((state.ownedKeys & ki) == ki):
                continue
            if ((k.obstacles & state.ownedKeys) != k.obstacles):
                continue
            newOwned = state.ownedKeys | ki
            
            newPos = FindPositionOf(k.key, map)
            q.append(State(state.p1, state.p2, state.p3, newPos, newOwned, state.steps + k.distance))
    return currentMin
    
input = """#################################################################################
#.....#.#.....#.....#.......#..p#.......#..y......#...#..................w......#
#.###.#.#.#.###.#.#.#.###.#.#.#.#.#####.#.#####.#.#.#.#######.#.#####Z###########
#...#...#.#.....#.#.#.#.#.#...#.#.#.....#.#...#.#...#.........#.#...#.#k....#...#
#.#.###.#.#######.#.#.#.#.#.#####.#.###.#.#.###.#############.###.#.###.###R#.#.#
#.#.#...#...#.....#.#...#.#.#.....#.#.#.#.#...#.#...........#.#...#.....#.#.#.#.#
#.#.#######.#.#####.#####.###.#####.#.#.#.###.#.#####.#####.#.#.#########.#.#.#.#
#.#.#.....F.#...#.......#.....#.N...#.#.#...#.#.....#.....#.#.#.#...#.....#...#.#
###.#.#######.#.#######.#.#####.#####.#.###.#.#####.#####.#.#.#.###.#.###.#####.#
#...#...#...#.#.....#.#.#.....#.#.......#.#.....#.#.#.....#...#...#.#.#.....#...#
#.#####.#.#.#######.#.#.#######.#######.#.#####.#.#.#.#########.#.#.#.#.###.#.###
#...I.#.#.#.....#...#.#.....#...#.....#.#.#...#...#.#.#.......#.#.#.#.#.#...#.#.#
#.###.#.#.#####.#.###.#####.#.###.###.#.#.#.#.#.###.###.#####.###E#.#.#.#####.#.#
#...#...#.#...#...#.......#.#.....#...#.#...#...#...#...#...#.....#...#.....#.#.#
#########.###.#########.#.#.#######.###.#########.###.###.#########.#######.#.#.#
#.....S.#...#...C.......#.#.........#.#.#.......#...#.#...#.......#.#.......#..s#
#.#####.###.#######.#####.###########.#.#.#####.#.#.#B###.#.#####.#.#.#####.###.#
#r#.........#d....#.....#.#.....#...#...#.#.....#.#.#...#.......#...#...#.#...#.#
#.#########.#.###.#####.###.#.#.#.#.#.###.###.#####.###.#######.#######.#.###.#.#
#.........#.#.#.#...D.#.....#.#.#.#.#.#.#...#.#.......#.#.....#...#.....#.....#.#
#.#######.#.#.#.#####.#.#####.#.###.#.#.###.#.###.###.#.#.###L###.#.#####.#####.#
#.#.....#.#.#.#.....#.#.#...#.#...#.#...#...#.....#...#...#.#j#.#.#.#...#.#..i#.#
#.#####.#.###.#.###.###.#.###.###.#.###.#.#########.#######.###.#.#.#.#.#.#.#.#.#
#.#.....#.#.M.#...#.....#.#...#.......#.#.#...#...#...#.......#...#...#.#.#.#.#.#
#.#.###.#.#.#########.###.#.###########.#.#.#.#.#.###.#.#######.#######.###.#.#.#
#...#...#.#..m......#.....#...#.........#.#.#...#......h#.......#...#.G.#...#...#
#####.###.#########.#.#######.#.#########.###############.#######.###.#.#.#######
#.....#...#...#q..#.#.#.......#.#.......#....v....#...#...#.........#.#.#..f..#.#
#.#####.#.###.#.#.#Q#.#.#######.#.#.#####.#######.#.#.#.#########.#.#.#.#####.#.#
#e#.....#.....#.#.#.#.#.#.......#.#.....#.#.....#...#.#.#.......#.#.#.#.#...T.#.#
###.#####.#####.#.#.#.#.#.###########.#.#.#####.#####.#.#.#####.###.#.###.#####.#
#...#.....#.....#...#.#...#.#.......#.#.#...........#.#...#...#...#.#.....#.....#
#.#####K###J#########.#####.#.#.###.###.###########.#.#####.#.###.#.###########.#
#.....#.#.#.#...#u........#.#x#.#.#.#..a#.....#.#...#.....U.#..c#...#.........#.#
#.###.#.#.#.#.#.#########.#.#.#.#.#.#.###.###.#.#.#####.#.#########.#.###.###.#.#
#.#...#...#...#.....#.#...#...#.#.#.#...#...#.#.#.#...#.#.#...#.....#.#...#.#...#
#.#.#####.#########.#.#.#####.#.#.#.###.###.#.#.#.###.#.###.#.#.#######.###.###.#
#.#.#b..#...#..l....#.#.....#.#.#...#...#...#...#...#.#...#.#...#.....#.#...#...#
#.#.#.#.#####.#######.#####.###.#.###.#.#.#########.#.###.#.#######.#.#.#.#.#.###
#.#...#.......#.................#.....#1#2..............#...........#...#.#.....#
#################################################################################
#...........#.....#...#.......#........3#4..#.....#...............#.....#.....#.#
#.#########.#.###.#.#.###.###.#.###.#####.#.#####.#.#############.#.###.#.#.#.#.#
#..t..#.#...#...#...#...#.#...#...#.....#.#.......#.#.#.....#...X.#...#.#.#.#.#.#
#.###.#.#.###.#.#######.#.#.#####.#####.#.#.#######.#.#.#.#.#.#######.#.###.#.#.#
#.#...#.#.#...#.....#.#...#.#...#.#.....#.#.#.......#...#.#.#.......#.#.#...#...#
#.#.###.#.#.#######.#.#####.#.#.#.#.#####.###.#########.#.#######.#.#.#.#.#####.#
#.#.#...#.#.#.......#...#...#.#...#.#...#.....#.......#.#...#...#.#...#.#.....#.#
#.#.#.###.###.#######.#.#.###.#####.#.#.#.#####.###.#.#.###.#.#.#.#####.#.###.###
#.#.#...#.#...#...#...#.#.#.......#...#.#.#...#.#...#.#.#...#.#.#.#.....#...#...#
#.#.###.#.#.###.#.#.#.#.#.###.#########.#.#.###.#.###.###.#.#.#.#.#.###########.#
#.#...#...#...#.#...#.#.#...#.#.........#.#.....#.#.....#.#.#.#.#.#...#.........#
#####.#.###.#.#.#####.#.###.#.#.#########.#.#####.#####.#.###.#.#####.#.#.#######
#...#.#...#.#.#...#...#...#.#.#.........#.#.....#.....#.#.#...#...#...#.#.......#
#.#.#.###.###.#.###.###.###.#.#########.#.#####.#####.#.#.#.#####.#.###.#######.#
#.#...#.#.....#.#...#...#...#...#.#...V.#.#...#.#.....#...#...#.#...#...#.....#.#
#.#####.#######.#.###.###.#####.#.#.###.#.#.###.#.#######.###.#.#####.###.#####.#
#...#...#.....#.#.#...#...#.......#...#.#.#.....#.#...#...#.#.#.....#.#...#...#.#
###.#.#.#.#.#.###.#####.#############.###.#####.#.#.#.#.###.#.#.#####.###.#.#.#.#
#.#.#.#...#.#...#.#.....#...........#...#.A...#.#.#.#.#.#...#.#.....#...#.#.#...#
#.#.#.#####.###.#.#.###.###.#######.###.#####.###.#.#.#.#.#.#.#.###.###.#.#.###.#
#.#.#...#...#.....#.#.#.....#.....#.....#...#.....#.#.#.#.#.#.#.#.#...#...#...#.#
#.#.###.#.#########.#.###########.#####.#.#.#######.#.#.###.###.#.#.#####.###.###
#.#...#.#...........#...#.........#.....#.#...#.....#.#...#...#...#.......#.#...#
#.###.#.#########.#####.###.###.###.#####.#.#.#####.#.###.#.#.#.#########.#.###.#
#...#.#...#.....#.#.#...#...#...#...#...#.#.#.....#.#...#.#.#.#.#.....W.#...#...#
#.#.#.#####.###.#.#.#.###.###.###.###.#.#.#.#####.###.###.#.#.#.#.#####.###.#.###
#.#.#.......#.#.#...#.#...#...#.#.#...#.#.#.....#.....#...#.#...#.#.....#...#...#
#.#.#########.#.#####.#.###.###.#.#####.#.#####.#####.#.#####.###.#.#######.###.#
#.#.#.#.......#.......#.#...#...#.....#.#.#...#.....#.#.....#...#.#.......#.#...#
#.#.#.#O#####.#########.#.#####.#####.#.#.###.#####.#######.###.#.#######.###.###
#.#...#.....#...#.......#.....#.....#.#.#...#...#.#.......#...#.#.....#.#...#...#
#.#########.###.#.#####.#####.#####.#.#.###.#.#.#.#######.###.#######.#.###.###.#
#.#.......#.#.#.#...#.#.#...#.......#.#.#.#.#.#.#.......#z..#.....#...#...#....o#
#.#.#####.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#.#.###.#.#######.#.###.#######.#
#.#...#.#...#.#...#...#...#.#.....#...#.#.#.#.#.#.#.#...#.#.......#.#.#...#.....#
#.###.#.#####.###.###.#####.#######.###.#.#.#.#.###.#.###.#Y#######.#.#.#.#.#####
#g....#.........#...#...#...#...#...#...#.#...#.....#.#.#.#...#.....#.#.#...#...#
#.###########.#.###.###.#.###.#.#.#####.#.###########.#.#.###.###.###.#.#######.#
#.............#...#..n..#.....#...H.....#...............#.........#...P.........#
#################################################################################"""
    
rows, cols = 81, 81
key_count = 26
keys = []
lines = input.split("\n")
for y in range(rows):
    for x in range(cols):
        if (lines[y][x].islower()):
            keys.append(lines[y][x])
dictionary = {}
dictionary[FindPositionOf("1",lines).getString()] = ReachableKeys(lines, FindPositionOf("1", lines), "")
dictionary[FindPositionOf("2",lines).getString()] = ReachableKeys(lines, FindPositionOf("2", lines), "")
dictionary[FindPositionOf("3",lines).getString()] = ReachableKeys(lines, FindPositionOf("3", lines), "")
dictionary[FindPositionOf("4",lines).getString()] = ReachableKeys(lines, FindPositionOf("4", lines), "")

for k in keys:
    dictionary[FindPositionOf(k,lines).getString()] = ReachableKeys(lines, FindPositionOf(k, lines), "")
    
minSteps = CollectKeys(lines, dictionary, key_count)
print(minSteps)