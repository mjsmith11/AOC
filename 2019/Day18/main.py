# This theoretically worked for part 1.  It solved all the examples but would not
# haved solved the real input in a timely manner
class Node:
    def __init__(self, x, y, steps, keys):
        self.x = x
        self.y = y
        self.steps = steps
        self.keys = keys
    
    def getString(self):
        return str(self.x) + "," + str(self.y) + "," + ''.join(sorted(self.keys))

    
input = """#################################################################################
#.....#.#.....#.....#.......#..p#.......#..y......#...#..................w......#
#.###.#.#.#.###.#.#.#.###.#.#.#.#.#####.#.#####.#.#.#.#######.#.#####Z###########
#...#...#.#.....#.#.#.#.#.#...#.#.#.....#.#...#.#...#.........#.#...#.#k....#...#
#.#.###.#.#######.#.#.#.#.#.#####.#.###.#.#.###.#############.###.#.###.###R#.#.#
#.#.#...#...#.....#.#...#.#.#.....#.#.#.#.#...#.#...........#.#...#.....#.#.#.#.#
#.#.#######.#.#####.#####.###.#####.#.#.#.###.#.#####.#####.#.#.#########.#.#.#.#
#.#.#.....F.#...#.......#.....#.N...#.#.#...#.#.....#.....#.#.#.#...#.....#...#.#
###.#.#######.#.#######.#.#####.#####.#.###.#.#####.#####.#.#.#.###.#.###.#####.#
#...#...#...#.#.....#.#.#.....#.#.......#.#.....#.#.#.....#...#...#.#.#.....#...#
#.#####.#.#.#######.#.#.#######.#######.#.#####.#.#.#.#########.#.#.#.#.###.#.###
#...I.#.#.#.....#...#.#.....#...#.....#.#.#...#...#.#.#.......#.#.#.#.#.#...#.#.#
#.###.#.#.#####.#.###.#####.#.###.###.#.#.#.#.#.###.###.#####.###E#.#.#.#####.#.#
#...#...#.#...#...#.......#.#.....#...#.#...#...#...#...#...#.....#...#.....#.#.#
#########.###.#########.#.#.#######.###.#########.###.###.#########.#######.#.#.#
#.....S.#...#...C.......#.#.........#.#.#.......#...#.#...#.......#.#.......#..s#
#.#####.###.#######.#####.###########.#.#.#####.#.#.#B###.#.#####.#.#.#####.###.#
#r#.........#d....#.....#.#.....#...#...#.#.....#.#.#...#.......#...#...#.#...#.#
#.#########.#.###.#####.###.#.#.#.#.#.###.###.#####.###.#######.#######.#.###.#.#
#.........#.#.#.#...D.#.....#.#.#.#.#.#.#...#.#.......#.#.....#...#.....#.....#.#
#.#######.#.#.#.#####.#.#####.#.###.#.#.###.#.###.###.#.#.###L###.#.#####.#####.#
#.#.....#.#.#.#.....#.#.#...#.#...#.#...#...#.....#...#...#.#j#.#.#.#...#.#..i#.#
#.#####.#.###.#.###.###.#.###.###.#.###.#.#########.#######.###.#.#.#.#.#.#.#.#.#
#.#.....#.#.M.#...#.....#.#...#.......#.#.#...#...#...#.......#...#...#.#.#.#.#.#
#.#.###.#.#.#########.###.#.###########.#.#.#.#.#.###.#.#######.#######.###.#.#.#
#...#...#.#..m......#.....#...#.........#.#.#...#......h#.......#...#.G.#...#...#
#####.###.#########.#.#######.#.#########.###############.#######.###.#.#.#######
#.....#...#...#q..#.#.#.......#.#.......#....v....#...#...#.........#.#.#..f..#.#
#.#####.#.###.#.#.#Q#.#.#######.#.#.#####.#######.#.#.#.#########.#.#.#.#####.#.#
#e#.....#.....#.#.#.#.#.#.......#.#.....#.#.....#...#.#.#.......#.#.#.#.#...T.#.#
###.#####.#####.#.#.#.#.#.###########.#.#.#####.#####.#.#.#####.###.#.###.#####.#
#...#.....#.....#...#.#...#.#.......#.#.#...........#.#...#...#...#.#.....#.....#
#.#####K###J#########.#####.#.#.###.###.###########.#.#####.#.###.#.###########.#
#.....#.#.#.#...#u........#.#x#.#.#.#..a#.....#.#...#.....U.#..c#...#.........#.#
#.###.#.#.#.#.#.#########.#.#.#.#.#.#.###.###.#.#.#####.#.#########.#.###.###.#.#
#.#...#...#...#.....#.#...#...#.#.#.#...#...#.#.#.#...#.#.#...#.....#.#...#.#...#
#.#.#####.#########.#.#.#####.#.#.#.###.###.#.#.#.###.#.###.#.#.#######.###.###.#
#.#.#b..#...#..l....#.#.....#.#.#...#...#...#...#...#.#...#.#...#.....#.#...#...#
#.#.#.#.#####.#######.#####.###.#.###.#.#.#########.#.###.#.#######.#.#.#.#.#.###
#.#...#.......#.................#.....#.................#...........#...#.#.....#
#######################################.@.#######################################
#...........#.....#...#.......#.............#.....#...............#.....#.....#.#
#.#########.#.###.#.#.###.###.#.###.#####.#.#####.#.#############.#.###.#.#.#.#.#
#..t..#.#...#...#...#...#.#...#...#.....#.#.......#.#.#.....#...X.#...#.#.#.#.#.#
#.###.#.#.###.#.#######.#.#.#####.#####.#.#.#######.#.#.#.#.#.#######.#.###.#.#.#
#.#...#.#.#...#.....#.#...#.#...#.#.....#.#.#.......#...#.#.#.......#.#.#...#...#
#.#.###.#.#.#######.#.#####.#.#.#.#.#####.###.#########.#.#######.#.#.#.#.#####.#
#.#.#...#.#.#.......#...#...#.#...#.#...#.....#.......#.#...#...#.#...#.#.....#.#
#.#.#.###.###.#######.#.#.###.#####.#.#.#.#####.###.#.#.###.#.#.#.#####.#.###.###
#.#.#...#.#...#...#...#.#.#.......#...#.#.#...#.#...#.#.#...#.#.#.#.....#...#...#
#.#.###.#.#.###.#.#.#.#.#.###.#########.#.#.###.#.###.###.#.#.#.#.#.###########.#
#.#...#...#...#.#...#.#.#...#.#.........#.#.....#.#.....#.#.#.#.#.#...#.........#
#####.#.###.#.#.#####.#.###.#.#.#########.#.#####.#####.#.###.#.#####.#.#.#######
#...#.#...#.#.#...#...#...#.#.#.........#.#.....#.....#.#.#...#...#...#.#.......#
#.#.#.###.###.#.###.###.###.#.#########.#.#####.#####.#.#.#.#####.#.###.#######.#
#.#...#.#.....#.#...#...#...#...#.#...V.#.#...#.#.....#...#...#.#...#...#.....#.#
#.#####.#######.#.###.###.#####.#.#.###.#.#.###.#.#######.###.#.#####.###.#####.#
#...#...#.....#.#.#...#...#.......#...#.#.#.....#.#...#...#.#.#.....#.#...#...#.#
###.#.#.#.#.#.###.#####.#############.###.#####.#.#.#.#.###.#.#.#####.###.#.#.#.#
#.#.#.#...#.#...#.#.....#...........#...#.A...#.#.#.#.#.#...#.#.....#...#.#.#...#
#.#.#.#####.###.#.#.###.###.#######.###.#####.###.#.#.#.#.#.#.#.###.###.#.#.###.#
#.#.#...#...#.....#.#.#.....#.....#.....#...#.....#.#.#.#.#.#.#.#.#...#...#...#.#
#.#.###.#.#########.#.###########.#####.#.#.#######.#.#.###.###.#.#.#####.###.###
#.#...#.#...........#...#.........#.....#.#...#.....#.#...#...#...#.......#.#...#
#.###.#.#########.#####.###.###.###.#####.#.#.#####.#.###.#.#.#.#########.#.###.#
#...#.#...#.....#.#.#...#...#...#...#...#.#.#.....#.#...#.#.#.#.#.....W.#...#...#
#.#.#.#####.###.#.#.#.###.###.###.###.#.#.#.#####.###.###.#.#.#.#.#####.###.#.###
#.#.#.......#.#.#...#.#...#...#.#.#...#.#.#.....#.....#...#.#...#.#.....#...#...#
#.#.#########.#.#####.#.###.###.#.#####.#.#####.#####.#.#####.###.#.#######.###.#
#.#.#.#.......#.......#.#...#...#.....#.#.#...#.....#.#.....#...#.#.......#.#...#
#.#.#.#O#####.#########.#.#####.#####.#.#.###.#####.#######.###.#.#######.###.###
#.#...#.....#...#.......#.....#.....#.#.#...#...#.#.......#...#.#.....#.#...#...#
#.#########.###.#.#####.#####.#####.#.#.###.#.#.#.#######.###.#######.#.###.###.#
#.#.......#.#.#.#...#.#.#...#.......#.#.#.#.#.#.#.......#z..#.....#...#...#....o#
#.#.#####.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#.#.###.#.#######.#.###.#######.#
#.#...#.#...#.#...#...#...#.#.....#...#.#.#.#.#.#.#.#...#.#.......#.#.#...#.....#
#.###.#.#####.###.###.#####.#######.###.#.#.#.#.###.#.###.#Y#######.#.#.#.#.#####
#g....#.........#...#...#...#...#...#...#.#...#.....#.#.#.#...#.....#.#.#...#...#
#.###########.#.###.###.#.###.#.#.#####.#.###########.#.#.###.###.###.#.#######.#
#.............#...#..n..#.....#...H.....#...............#.........#...P.........#
#################################################################################"""
rows, cols = 81, 81
key_count = 26
#map = [[' ']*rows]*cols 
lines = input.split("\n")
start_node = Node(0,0,0,"")
for y in range(rows):
    for x in range(cols):
        if(lines[y][x] == "@"):
            start_node.x = x
            start_node.y = y
            lines[y] = lines[y].replace("@",".")
exploredNodes = {}
queue = [start_node]
goal = None

while(goal is None):
    #print("popping")
    current_node = queue.pop(0)
    neighbors = []
    if (current_node.x != 0):
        neighbors.append((current_node.x - 1, current_node.y))
    if (current_node.y != 0):
        neighbors.append((current_node.x, current_node.y - 1))
    if (current_node.x + 1 < cols):
        neighbors.append((current_node.x + 1, current_node.y))
    if (current_node.y + 1 < rows):
        neighbors.append((current_node.x, current_node.y + 1))
    for neighbor in neighbors:
        if (lines[neighbor[1]][neighbor[0]] == '.'):
            new_node = Node(neighbor[0], neighbor[1], current_node.steps + 1, current_node.keys)
            if (new_node.getString() not in exploredNodes):
                queue.append(new_node)
        elif (lines[neighbor[1]][neighbor[0]].isupper()):
            if(lines[neighbor[1]][neighbor[0]].lower() in current_node.keys):
                new_node = Node(neighbor[0], neighbor[1], current_node.steps + 1, current_node.keys)
                if (new_node.getString() not in exploredNodes):
                    queue.append(new_node)
        elif (lines[neighbor[1]][neighbor[0]].islower()):
            new_keys = current_node.keys
            if (lines[neighbor[1]][neighbor[0]] not in new_keys):
                new_keys = new_keys + lines[neighbor[1]][neighbor[0]]
                #print(new_keys)
            new_node = Node(neighbor[0], neighbor[1], current_node.steps + 1, new_keys)
            if (len(new_keys) == key_count):
                goal = new_node
                break
            elif(new_node.getString() not in exploredNodes):
                queue.append(new_node)
    exploredNodes[current_node.getString()] = ""
    if(len(exploredNodes)%100000 == 0):
        print(len(exploredNodes))
            
# don't append if we have explored
print(goal.steps)